NUMBERS FROM 1-10:
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
public class NumberThread extends Thread {
    @Override
    public void run() {
        for (int i = 1; i <= 10; i++) {
            System.out.println(i);
        }
    }

    public static void main(String[] args) {
        NumberThread thread = new NumberThread();
        thread.start();
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 IMPLEMENT RUNNABLE FROM MULTIPLE THREADS:
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
package Programs;

public class MultipleClass 
{
	    public static void main(String[] args) {
	        MessagePrinter printer1 = new MessagePrinter("Hello from Thread 1");
	        MessagePrinter printer2 = new MessagePrinter("Greetings from Thread 2");

	        Thread thread1 = new Thread(printer1);
	        Thread thread2 = new Thread(printer2);

	        thread1.start();
	        thread2.start();
	    }
	}

class MessagePrinter implements Runnable
 {
    private String message;

    public MessagePrinter(String message) 
{
        this.message = message;
    }

    @Override
    public void run() {
        System.out.println("Thread " + Thread.currentThread().getName() + ": " + message);
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
JOIN AND DEMONSTRATE:
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------package Programs;

public class SleepDemonstrateClass 
{
	    public static void main(String[] args) throws InterruptedException 
{
	        Thread thread1 = new Thread(() -> 	                

	        {
	            try {
			System.out.println("Thread 1: Starting...");
			Thread.sleep(2000);
                        System.out.println("Thread 1: Finished sleeping.");
	            } catch (InterruptedException e) 
		   {
	                e.printStackTrace();
	            }
	        });

	        thread1.start();

	        System.out.println("Main thread: Waiting for thread1...");
	        thread1.join(); 
	        System.out.println("Main thread: Thread1 finished.  Continuing...");

	        System.out.println("Main thread: Work complete.");
	    }
	}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
MAIN PROGRAM:-
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ackage Programs;

class TicketBooking {
    private int totalSeats;

    public TicketBooking(int seats) {
        this.totalSeats = seats;
    }

   
    public synchronized void bookTickets(String user, int seatsRequested) {
        System.out.println(user + " is trying to book " + seatsRequested + " ticket(s).");

        try {
            Thread.sleep(1000); // Simulate delay
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        if (seatsRequested <= totalSeats) {
            System.out.println("Booking successful for " + user + "!");
            totalSeats -= seatsRequested;
        } else {
            System.out.println("Booking failed for " + user + ",Due to unavailability of seats");
        }

        System.out.println("Remaining seats: " + totalSeats + "\n");
    }
}

class UserThread extends Thread {
    private TicketBooking booking;
    private String userName;
    private int seatsToBook;

    public UserThread(TicketBooking booking, String userName, int seatsToBook) {
        this.booking = booking;
        this.userName = userName;
        this.seatsToBook = seatsToBook;
    }

    @Override
    public void run() {
        booking.bookTickets(userName, seatsToBook);
    }
}

public class TicketBookingSystem {
    public static void main(String[] args) {
        TicketBooking bookingSystem = new TicketBooking(10); 

       
        UserThread user1 = new UserThread(bookingSystem, "Radha",2);
        UserThread user2 = new UserThread(bookingSystem, "krishna", 2);
        UserThread user3 = new UserThread(bookingSystem, "chtuki", 3);
        UserThread user4 = new UserThread(bookingSystem, "mowgli", 4);

       
        user1.start();
        user2.start();
        user3.start();
        user4.start();
    }
}

